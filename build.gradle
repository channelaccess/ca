// Set up for bintray deployment to JCenter
buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'base'
    id 'java'
    id 'com.jfrog.bintray' version '1.8.5'
    id 'maven-publish'
    id 'jacoco'
}

jacoco {
    toolVersion = '0.8.5'
}

// Explicitly describe the current build environment
println "The Gradle version being used for this build is: ${gradle.gradleVersion}."
println "The Java version being used for this gradle build is: ${JavaVersion.current()}."

// Define the coordinates for the build products.
group = 'org.epics'
version = '1.4.0'

// Note: currently (2020-06-01) the inspection error flagged up by IntelliJ is incorrect and has been suppressed.
//noinspection GroovyUnusedAssignment
archivesBaseName = 'ca'

// Define extra properties used to control build.
// ext.deployOSS = 'X' // Don't care about the value just whether its defined or not.
// ext.deployPSI = 'X' // Don't care about the value just whether its defined or not.

// Define which version of the Java compiler to use.
java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

// Check that the gradle build is been performed on the expected Java platform.
if (JavaVersion.current() != project.targetCompatibility) {
    throw new GradleException( "The java version used ${JavaVersion.current()} is not the expected version ${project.targetCompatibility}.")
}

compileJava {
    // The following options can be enabled for deeper introspection into the codebase...
    options.compilerArgs << '-Xlint:unchecked'
    options.compilerArgs << '-Xlint:deprecation'
}

compileTestJava {
    // The following options can be enabled for deeper introspection into the codebase...
    options.compilerArgs << '-Xlint:unchecked'
    options.compilerArgs << '-Xlint:deprecation'
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
    }

    test {
        java {
            srcDirs 'src/test/java'
        }
    }

    integrationTest {
        java {
            srcDirs 'src/integrationTest/java'
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url = 'https://oss.sonatype.org/content/repositories/snapshots'
    }
}

dependencies {

    // Note in the dependencies below the javadoc versions are explicitly
    // included to assist code development when viewing the project inside
    // IDEs such as IntelliJ.

    // Needed for parameter validation (also the stopwatch timing class
    // that is used in testing).
    implementation 'org.apache.commons:commons-lang3:3.9'
    implementation 'org.apache.commons:commons-lang3:3.9:javadoc'

    // Support for documenting Thread-Safety
    implementation 'com.github.stephenc.jcip:jcip-annotations:1.0-1'
    implementation 'com.github.stephenc.jcip:jcip-annotations:1.0-1:javadoc'

    // Supports unit and integration tests.
    // Note the following are compile dependencies because they need to
    // be included in the fatJarWithTests jar file.
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
    testImplementation 'org.junit.platform:junit-platform-launcher:1.6.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.6.0'
    testImplementation 'org.junit.platform:junit-platform-commons:1.6.2'
    testImplementation 'org.mockito:mockito-core:3.3.3'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.epics:jca:2.4.4-j8'

    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.6.0:javadoc'
    testImplementation 'org.junit.platform:junit-platform-launcher:1.6.2:javadoc'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.6.0:javadoc'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0:javadoc'
    testImplementation 'org.mockito:mockito-core:3.3.3:javadoc'
    testImplementation 'org.hamcrest:hamcrest:2.2:javadoc'
    testImplementation 'org.epics:jca:2.4.4-j8:javadoc'

    integrationTestImplementation 'org.apache.commons:commons-lang3:3.9'
    integrationTestImplementation 'org.hamcrest:hamcrest:2.2'
    integrationTestImplementation 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
    integrationTestImplementation 'org.junit.platform:junit-platform-launcher:1.6.2'
    integrationTestImplementation 'org.junit.jupiter:junit-jupiter-params:5.6.0'
    integrationTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testImplementation 'org.epics:jca:2.4.4-j8'
}

test {
    println 'The test target has been invoked.'

    // Note: this configuration is automatically used for all gradle-triggered tests.
    useJUnitPlatform()

    // -- START: Java Network Stack Configuration --
    // Both these properties MUST be asserted unless the task is using the CA Library
    // Context which initialises the network stack through a static definition.
    systemProperty 'java.net.preferIPv4Stack', 'true'
    systemProperty 'java.net.preferIPv6Stack', 'false'
    // -- END: Java Network Stack Configuration --

    systemProperty 'CA_LIBRARY_LOG_LEVEL', 'INFO'
    systemProperty 'CA_REPEATER_DISABLE', 'false'
    systemProperty 'CA_REPEATER_LOG_LEVEL', 'INFO'
    systemProperty 'CA_REPEATER_OUTPUT_CAPTURE', 'false'

    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat 'full'
        outputs.upToDateWhen {false}
        showStandardStreams = false
    }

    finalizedBy jacocoTestReport // report is always generated after tests run
}

task integrationTest(type: Test) {

    description = 'Runs integration tests.'
    useJUnitPlatform()

    // -- START: Java Network Stack Configuration --
    // Both these properties MUST be asserted unless the task is using the CA Library
    // Context which initialises the network stack through a static definition.
    systemProperty 'java.net.preferIPv4Stack', 'true'
    systemProperty 'java.net.preferIPv6Stack', 'false'
    // -- END: Java Network Stack Configuration --

    // For the integration tests there are useful messages output using log
    // messages at FINE level. This allows the information for the actual results
    // which are emitted with log level INFO to be filtered out.
    systemProperty 'CA_LIBRARY_LOG_LEVEL', 'INFO'
    systemProperty 'CA_REPEATER_DISABLE', 'false'

    group = 'verification'
    include(['**/*.class'])
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    shouldRunAfter test

    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat 'full'
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}

javadoc {
    // TODO: Re-evaluate situation after move to Java 11.
    // Ideally we would like to generate HTML 5 javadoc files. But currently
    // (2020-05-07) this will not work with Java 8. Need to wait for upgrade
    // to Java 11 then try again.
    // options.addBooleanOption( 'html5', true)
    options.addStringOption( 'tag', 'implNote:a:Implementation Note:' )
}

task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc' )
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier.set( 'sources' )
    from sourceSets.main.allSource
}

task Jar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Java EPICS CA',
                   'Implementation-Version': getArchiveVersion()
    }
    from sourceSets.main.output
}

task testJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Java EPICS CA',
                   'Implementation-Version': getArchiveVersion()
    }

    archiveClassifier.set( 'test' )
    from sourceSets.test.output
}

task fatJar(type: Jar) {
    archiveClassifier.set( 'all' )
    from {
        manifest {
            attributes 'Implementation-Title': 'Java EPICS CA',
                       'Implementation-Version': getArchiveVersion()
        }
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree( it ) }
    }
    with jar
}

task fatJarWithTests(type: Jar) {
    archiveClassifier.set( 'all-with-tests' )
    manifest {
        attributes 'Implementation-Title': 'Java EPICS CA',
                   'Implementation-Version': getArchiveVersion()
    }
    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    from { configurations.testRuntimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    with testJar
}

task runEpicsChannelAccessTestServer( type:JavaExec ) {
    main = 'org.epics.ca.EpicsChannelAccessTestServer'
    classpath fatJarWithTests
}

task runUdpSocketTester( type:JavaExec ) {
    main = 'org.epics.ca.impl.repeater.UdpSocketTester'
    // -- START: Java Network Stack Configuration --
    // Both these properties MUST be asserted unless the task is using the CA Library
    // Context which initialises the network stack through a static definition.
    systemProperty 'java.net.preferIPv4Stack', 'true'
    systemProperty 'java.net.preferIPv6Stack', 'false'
    // -- END: Java Network Stack Configuration --

    classpath fatJarWithTests
    args '4444', '5'
}

task runUdpSocketReserver( type:JavaExec ) {
    main = 'org.epics.ca.impl.repeater.UdpSocketReserver'
    // -- START: Java Network Stack Configuration --
    // Both these properties MUST be asserted unless the task is using the CA Library
    // Context which initalises the network stack through a static definition.
    systemProperty 'java.net.preferIPv4Stack', 'true'
    systemProperty 'java.net.preferIPv6Stack', 'false'
    // -- END: Java Network Stack Configuration --

    classpath fatJarWithTests
    args '0.0.0.0', '9162', '500'
}

task runUdpMessageSniffer( type:JavaExec ) {
    main = 'org.epics.ca.impl.repeater.UdpMessageSniffer'

    // -- START: Java Network Stack Configuration --
    // Both these properties MUST be asserted unless the task is using the CA Library
    // Context which initialises the network stack through a static definition.
    systemProperty 'java.net.preferIPv4Stack', 'true'
    systemProperty 'java.net.preferIPv6Stack', 'false'
    // -- END: Java Network Stack Configuration --

    classpath fatJarWithTests
    args '5065'
}

task runCARepeater( type:JavaExec ) {
    main = 'org.epics.ca.impl.repeater.CARepeater'

    // -- START: Java Network Stack Configuration --
    // Both these properties MUST be asserted unless the task is using the CA Library
    // Context which initialises the network stack through a static definition.
    systemProperty 'java.net.preferIPv4Stack', 'true'
    systemProperty 'java.net.preferIPv6Stack', 'false'
    // -- END: Java Network Stack Configuration --

    classpath fatJarWithTests
    args '5065'
}

// Run the TargetPlatformTestRunner Program directly from Gradle.
task runTargetPlatformTestRunner( type: JavaExec ) {

    // -- START: Java Network Stack Configuration --
    // Both these properties MUST be asserted unless the task is using the CA Library
    // Context which initialises the network stack through a static definition.
    systemProperty 'java.net.preferIPv4Stack', 'true'
    systemProperty 'java.net.preferIPv6Stack', 'false'
    // -- END: Java Network Stack Configuration --

    systemProperty 'CA_LIBRARY_LOG_LEVEL', 'INFO'
    systemProperty 'CA_REPEATER_DISABLE', 'false'
    systemProperty 'CA_REPEATER_LOG_LEVEL', 'INFO'
    systemProperty 'CA_REPEATER_OUTPUT_CAPTURE', 'false'

    main = 'org.epics.ca.TargetPlatformTestRunner'
    classpath fatJarWithTests
    // Notes: Enable the appropriate option below:
    // noargs = run all the tests in the library.
    // args '-package', <fq_package_name> = run all the tests defined in the package.
    // args '-class', <fq_class_name> = run all the tests defined in the class.
    // args '-method', <fq_class_name#method_name> = run the specified test.

    args '-package', 'org.epics.ca'
    // args '-class', 'org.epics.ca.ChannelTest'
    // args '-method', 'org.epics.ca.ChannelTest#testMonitorDisconnectionBehaviour'
}

// Define what will get published
artifacts {
    archives jar, fatJar, fatJarWithTests, sourcesJar, javadocJar, testJar
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
}

// Set up the bintray publishing
publishing {
    publications {
        MyPublication( MavenPublication ) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            artifact testJar
            artifact fatJar
            artifact fatJarWithTests
            groupId group
            artifactId project.name
            version project.version
            pom {
                name = "org.epics:ca"
                description = "EPICS Channel-Access Java Client Library"
                url = "https://github.com/channelaccess/ca"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        name = "Simon Rees"
                        email = "simon.rees@psi.ch"
                    }
                    developer {
                        name = "Simon Ebner"
                        email = "simon.ebner@psi.ch"
                    }
                    developer {
                        name = "Matej Sekoranja"
                        email = "matej.sekoranja@cosylab.com"
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/channelaccess/ca/'
                    developerConnection = 'scm:git:ssh://github.com/channelaccess/ca.git/'
                    url = 'https://github.com/channelaccess/ca/'
                }
            }
        }
    }
}

// Define the Jfrog Bintray build.
bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['MyPublication']
    pkg {
        repo = 'hltools'
        name = 'org.epics:ca'
        userOrg = 'paulscherrerinstitute'
        desc = 'EPICS Channel-Access Java Client Library'
        websiteUrl = 'https://github.com/channelaccess/ca'
        issueTrackerUrl = 'https://github.com/channelaccess/ca/issues'
        vcsUrl = 'https://github.com/channelaccess/ca.git'
        licenses = [ 'GPL-3.0' ]
        githubReleaseNotesFile = 'README.md'
        version {
            name = project.version
            released  = new Date()
            vcsTag = project.version
            desc = 'EPICS Channel-Access Java Client Library'
        }
    }
}
